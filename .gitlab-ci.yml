image: docker:latest
services:
- name: docker:19.03.5-dind
  command: ["--mtu=1500"]
workflow:
  rules:
  - when: always
stages:
- build_front
- cypress
- publish_front
- build_docker_image
- docker_test
- deploy_docker_image
variables:
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"
  SECURE_ANALYZERS_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
  CS_MAJOR_VERSION: 2
  CI_APPLICATION_REPOSITORY: ${CI_REGISTRY_IMAGE}
  CI_APPLICATION_TAG: latest
.base:
  rules:
  - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_TAG'
    when: on_success
  - when: never
.base-dind:
  extends: .base
  tags:
  - docker-executor
  - kubernetes
  - shared
.base-shell:
  extends: .base
  tags:
  - docker-executor
  - kubernetes
  - shared
.rules_docker: &rules_docker
  rules:
  - if: '$CI_COMMIT_TAG'
    changes:
    - docker/*
    when: on_success
  - when: never
# build
build_front:
  extends: .base-dind
  image: node:12.20.0
  stage: build_front
  before_script:
  - npm i --cache .npm --prefer-offline --no-audit
  script:
  - npm audit
  - npm run lint
  - |
    if [ -z "$CI_MERGE_REQUEST_ID" ]
    then
      case "$CI_COMMIT_TAG" in
        *rc*)
          export WEB_COMPONENT_API_ENDPOINT=$WEB_COMPONENT_API_ENDPOINT_PREPROD
          export WEB_COMPONENT_ENDPOINT=$WEB_COMPONENT_ENDPOINT_PREPROD
          echo "BUILDING PREPROD!"
          ;;
        *)
          export WEB_COMPONENT_API_ENDPOINT=$WEB_COMPONENT_API_ENDPOINT_PROD
          export WEB_COMPONENT_ENDPOINT=$WEB_COMPONENT_ENDPOINT_PROD
          echo "BUILDING PROD!"
          ;;
      esac
    else
      export WEB_COMPONENT_API_ENDPOINT=$WEB_COMPONENT_API_ENDPOINT_PREPROD
      export WEB_COMPONENT_ENDPOINT=$WEB_COMPONENT_ENDPOINT_PREPROD
      echo "BUILDING MERGE REQUEST!"
    fi
  - npm run build
  artifacts:
    paths:
    - dist/
    expire_in: 1 days
    when: always
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
    - .npm
    - cache/Cypress
    - node_modules/
# Cypress
cypress_chrome:
  stage: cypress
  extends: .base-dind
  image: cypress/browsers:node12.14.1-chrome83-ff77
  rules:
  - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_TAG =~ /-rc/'
    when: on_success
  - when: never
  before_script:
  - npm i --cache .npm --prefer-offline
  script:
  - npm run test-chrome
  artifacts:
    when: always
    paths:
    - cypress/videos/*.mp4
    - cypress/screenshots/*/*.png
    expire_in: 10 days
# S3
publish_front:
  stage: publish_front
  extends: .base-dind
  image:
    name: minio/mc:RELEASE.2020-03-06T23-29-45Z
    entrypoint: [""]
  rules:
  - if: '$CI_COMMIT_TAG'
    when: on_success
  - when: never
  before_script:
  - mc config host add $S3_BUCKET $S3_HOST $S3_KEY $S3_PASSWORD --api s3v4
  script:
  - |
    case "$CI_COMMIT_TAG" in
      *rc*)
        export CI_COMMIT_BRANCH="develop"
        ;;
      *)
        export CI_COMMIT_BRANCH="master"
        ;;
    esac
  - mc cp --recursive dist/ $S3_BUCKET/$S3_BUCKET/site-paste/$CI_COMMIT_BRANCH
  artifacts:
    paths:
    - dist/
    expire_in: 1 days
    when: always
# DOCKER
build_docker_image:
  stage: build_docker_image
  extends: .base-shell
  rules:
  - if: '$CI_COMMIT_TAG'
    when: on_success
  - when: never
  artifacts:
    paths:
    - dist/
    expire_in: 1 days
    when: always
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  - cp dist/index.html docker/index.html
  - |
    case "$CI_COMMIT_TAG" in
      *rc*)
        export CI_COMMIT_BRANCH="develop"
        ;;
      *)
        export CI_COMMIT_BRANCH="master"
        ;;
    esac
  - docker build --pull --build-arg CI_COMMIT_BRANCH -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    docker
  - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} ${CI_REGISTRY_IMAGE}:latest
  - docker push ${CI_REGISTRY_IMAGE}:latest
container_scanning:
  stage: docker_test
  extends: .base-dind
  image: $SECURE_ANALYZERS_PREFIX/klar:$CS_MAJOR_VERSION
  !!merge <<: *rules_docker
  variables:
    CLAIR_DB_IMAGE_TAG: "latest"
    CLAIR_DB_IMAGE: "$SECURE_ANALYZERS_PREFIX/clair-vulnerabilities-db:$CLAIR_DB_IMAGE_TAG"
    GIT_STRATEGY: none
  allow_failure: true
  services:
  - name: $CLAIR_DB_IMAGE
    alias: clair-vulnerabilities-db
  script:
  - /analyzer run
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  dependencies: []
container_analysing:
  stage: docker_test
  extends: .base-shell
  allow_failure: true
  !!merge <<: *rules_docker
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  - docker run --rm -i -e CI=true -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest
    ${CI_REGISTRY_IMAGE}:latest
